// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	hiveinternalv1alpha1 "github.com/openshift/hive/pkg/apis/hiveinternal/v1alpha1"
	versioned "github.com/openshift/hive/pkg/client/clientset/versioned"
	internalinterfaces "github.com/openshift/hive/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/openshift/hive/pkg/client/listers/hiveinternal/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterSyncLeaseInformer provides access to a shared informer and lister for
// ClusterSyncLeases.
type ClusterSyncLeaseInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ClusterSyncLeaseLister
}

type clusterSyncLeaseInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewClusterSyncLeaseInformer constructs a new informer for ClusterSyncLease type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterSyncLeaseInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterSyncLeaseInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredClusterSyncLeaseInformer constructs a new informer for ClusterSyncLease type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterSyncLeaseInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.HiveinternalV1alpha1().ClusterSyncLeases(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.HiveinternalV1alpha1().ClusterSyncLeases(namespace).Watch(context.TODO(), options)
			},
		},
		&hiveinternalv1alpha1.ClusterSyncLease{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterSyncLeaseInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterSyncLeaseInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterSyncLeaseInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&hiveinternalv1alpha1.ClusterSyncLease{}, f.defaultInformer)
}

func (f *clusterSyncLeaseInformer) Lister() v1alpha1.ClusterSyncLeaseLister {
	return v1alpha1.NewClusterSyncLeaseLister(f.Informer().GetIndexer())
}
